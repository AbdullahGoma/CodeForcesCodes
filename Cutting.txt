#include <bits/stdc++.h>
using namespace std;
#define ll long long
using namespace std;

bool EvenOddEqual(int a[],int n) {
    int odd = 0;
    int even = 0;
    for(int i = 0;i < n;i++) {
        if(a[i] % 2 == 0) {
            even++;
        } else {
            odd++;
        }
    }
    return odd == even;
}

int main(){
    int n,b;
    int cuts = 0;
    int limit = 0;
    vector<int> x;
    cin >> n >> b;

    int a[n];

    for(int i = 0;i < n;i++) {
        cin >> a[i];
    }

    int i = 2;

    while(i != n) {
        if(EvenOddEqual(a,i)) {
            limit += abs(a[i] - a[i - 1]);
            x.insert(x.end(),1,limit);
        }
        i += 2;
    }
    limit = 0;
    sort(x.begin(), x.end());

    for(int i = 0;i < x.size();i++) {
        if((limit + x[i]) <= b) {
            limit += x[i];
            cuts++;
        }
    }
    cout << cuts;

}


................................................
Right Solution

#include <bits/stdc++.h>
using namespace std;
#define ll long long
using namespace std;

bool EvenOddEqual(int a[],int n) {
    int odd = 0;
    int even = 0;
    for(int i = 0;i < n;i++) {
        if(a[i] % 2 == 0) {
            even++;
        } else {
            odd++;
        }
    }
    return odd == even;
}

int main(){
    int n,b;
    int cuts = 0;
    int limit = 0;
    vector<int> x;
    cin >> n >> b;

    int a[n];

    for(int i = 0;i < n;i++) {
        cin >> a[i];
    }

    int i = 2;

    while(i != n) {
        if(EvenOddEqual(a,i)) {
            limit += abs(a[i] - a[i - 1]);
            x.insert(x.end(),1,limit);
        }
        i += 2;
        limit = 0;
    }

    limit = 0;
    
    sort(x.begin(), x.end());
    for(int i = 0;i < x.size();i++) {
        if((limit + x[i]) <= b) {
            limit += x[i];
            cuts++;
        }
    }
    cout << cuts;

}

