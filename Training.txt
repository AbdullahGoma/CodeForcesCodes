#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define endl '\n'

//ll prefix_sum[100000];

void init(){
    cin.tie(0);
    cin.sync_with_stdio(0);
}
ll GCD(ll a, ll b) {
    if (b == 0)
        return a;
    return GCD(b, a % b);
}
 
ll LCM(ll a, ll b) {
    return a / GCD(a, b) * b;
}

bool Prime(int x) {
    if (x < 2)
        return false;
    for (int i = 2; i * i <= x; i++) {
        if (x % i == 0) {
            return false;
        }
    }
    return true;
}

bool EvenOddEqual(int a[],int n) {
    int odd = 0;
    int even = 0;
    for(int i = 0;i < n;i++) {
        if(a[i] % 2 == 0) {
            even++;
        } else {
            odd++;
        }
    }
    return odd == even;
}

ll FibBetterEff(int n){
    ll a[n];
    a[0] = 0;
    a[1] = 1;
    for(int i = 2;i < n;i++){
        a[i] = a[i-1] + a[i-2];
    }
    return a[n - 1];;
}

bool binarySearch(ll a[],int n,int key){
    int start = 0;
    int end = n - 1;
    while(start <= end){
        int finder = end + (start - end) / 2;
        if(key == a[finder]) return true;
        else if(key > a[finder]) start = finder + 1;
        else end = finder - 1;
    }
    return false;
}


void rvereseArray(ll arr[], int start, int end)
{
    while (start < end)
    {
        int temp = arr[start]; 
        arr[start] = arr[end];
        arr[end] = temp;
        start++;
        end--;
    } 
}  

int findMinIndex(ll a[],int n,int key){
    int i;
    for(i = 0;i < n;i++){
        if(a[i] >= key) return i;
    }
    return -1;
}

//ll Summition[100000];
int main() {
    int n;
    int p;
    cin >> n >> p;
    ll a[n];
    int counter = 0;
    for(int i = 0;i < n;i++){
        cin >> a[i];
    }
    sort(a, a+n);
    if(findMinIndex(a, n, p) != -1) {
        int x = (n - findMinIndex(a, n, p)) / 3;
        cout << x << endl;
    }else cout << 0 << endl;
    return 0;
}

//////////////////

#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define endl '\n'

//ll prefix_sum[100000];

void init(){
    cin.tie(0);
    cin.sync_with_stdio(0);
}
ll GCD(ll a, ll b) {
    if (b == 0)
        return a;
    return GCD(b, a % b);
}
 
ll LCM(ll a, ll b) {
    return a / GCD(a, b) * b;
}

bool Prime(int x) {
    if (x < 2)
        return false;
    for (int i = 2; i * i <= x; i++) {
        if (x % i == 0) {
            return false;
        }
    }
    return true;
}

bool EvenOddEqual(int a[],int n) {
    int odd = 0;
    int even = 0;
    for(int i = 0;i < n;i++) {
        if(a[i] % 2 == 0) {
            even++;
        } else {
            odd++;
        }
    }
    return odd == even;
}

ll FibBetterEff(int n){
    ll a[n];
    a[0] = 0;
    a[1] = 1;
    for(int i = 2;i < n;i++){
        a[i] = a[i-1] + a[i-2];
    }
    return a[n - 1];;
}

bool binarySearch(ll a[],int n,int key){
    int start = 0;
    int end = n - 1;
    while(start <= end){
        int finder = end + (start - end) / 2;
        if(key == a[finder]) return true;
        else if(key > a[finder]) start = finder + 1;
        else end = finder - 1;
    }
    return false;
}

//ll Summition[100000];

int main() {
    string n;
    cin >> n;
    char num = n[n.length() - 1];
    char num1 = n[n.length() - 2];
    if(n.length() == 1 && (num - '0') > 0){
        int ones = num - '0'; 
        cout << "I will help you." << endl;
        return 0; 
    }else if(n.length() == 2){
        int n1 = (num - '0');
        int n2 = (num1 - '0');
        int m = n1 + n2 * 10;
        if(m <= 20 && m > 0){
            cout << m << ":" << endl;
            cout << "I will help you." << endl;
        } 
        else {
            cout << m << ":" << endl;
            cout << "Think again!" << endl;
        }
        return 0;
    }
    cout << n << ":" << endl;
    cout << "Think again!" << endl;
    
    return 0;
}
.............................................
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define endl '\n'

//ll prefix_sum[100000];

void init(){
    cin.tie(0);
    cin.sync_with_stdio(0);
}
ll GCD(ll a, ll b) {
    if (b == 0)
        return a;
    return GCD(b, a % b);
}
 
ll LCM(ll a, ll b) {
    return a / GCD(a, b) * b;
}

bool Prime(int x) {
    if (x < 2)
        return false;
    for (int i = 2; i * i <= x; i++) {
        if (x % i == 0) {
            return false;
        }
    }
    return true;
}

bool EvenOddEqual(int a[],int n) {
    int odd = 0;
    int even = 0;
    for(int i = 0;i < n;i++) {
        if(a[i] % 2 == 0) {
            even++;
        } else {
            odd++;
        }
    }
    return odd == even;
}

ll FibBetterEff(int n){
    ll a[n];
    a[0] = 0;
    a[1] = 1;
    for(int i = 2;i < n;i++){
        a[i] = a[i-1] + a[i-2];
    }
    return a[n - 1];;
}

bool binarySearch(ll a[],int n,int key){
    int start = 0;
    int end = n - 1;
    while(start <= end){
        int finder = end + (start - end) / 2;
        if(key == a[finder]) return true;
        else if(key > a[finder]) start = finder + 1;
        else end = finder - 1;
    }
    return false;
}

void rvereseArray(ll arr[], int start, int end)
{
    while (start < end)
    {
        int temp = arr[start]; 
        arr[start] = arr[end];
        arr[end] = temp;
        start++;
        end--;
    } 
}  

//ll Summition[100000];
int main() {
    int n;
    cin >> n;
    ll a[n], b[n];
    int counter = 0;
    for(int i = 0;i < n;i++){
        cin >> a[i];
    }
    for(int i = 0;i < n;i++){
        cin >> b[i];
    }
    sort(a, a+n);
    sort(b, b+n);
    rvereseArray(a, 0, n - 1);
    int sum = 0;
    int maximum = 0;
    for(int i = 0;i < n;i++){
        if(b[i] > a[i]) break;
        sum = sum + (a[i] - b[i]);
        maximum = max(maximum, sum);
    }
    cout << maximum << endl;
    return 0;
}

.................................................

#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define endl '\n'

//ll prefix_sum[100000];

void init(){
    cin.tie(0);
    cin.sync_with_stdio(0);
}
ll GCD(ll a, ll b) {
    if (b == 0)
        return a;
    return GCD(b, a % b);
}
 
ll LCM(ll a, ll b) {
    return a / GCD(a, b) * b;
}

bool Prime(int x) {
    if (x < 2)
        return false;
    for (int i = 2; i * i <= x; i++) {
        if (x % i == 0) {
            return false;
        }
    }
    return true;
}

bool EvenOddEqual(int a[],int n) {
    int odd = 0;
    int even = 0;
    for(int i = 0;i < n;i++) {
        if(a[i] % 2 == 0) {
            even++;
        } else {
            odd++;
        }
    }
    return odd == even;
}

ll FibBetterEff(int n){
    ll a[n];
    a[0] = 0;
    a[1] = 1;
    for(int i = 2;i < n;i++){
        a[i] = a[i-1] + a[i-2];
    }
    return a[n - 1];;
}

bool binarySearch(ll a[],int n,int key){
    int start = 0;
    int end = n - 1;
    while(start <= end){
        int finder = end + (start - end) / 2;
        if(key == a[finder]) return true;
        else if(key > a[finder]) start = finder + 1;
        else end = finder - 1;
    }
    return false;
}

void rvereseArray(ll arr[], int start, int end)
{
    while (start < end)
    {
        int temp = arr[start]; 
        arr[start] = arr[end];
        arr[end] = temp;
        start++;
        end--;
    } 
}  

//ll Summition[100000];
int main() {
    int n;
    cin >> n;
    ll a[n];
    int counter = 0;
    for(int i = 0;i < n;i++){
        cin >> a[i];
    }
    sort(a, a+n);
    rvereseArray(a, 0, n - 1);
    int sum = 0;
    bool flag = false;
    for(int i = 0;i < n;i++){
        if(a[i] % 2 == 0){
            sum++;
        } 
        if(sum > 2){
            flag = true;
            break;
        } 
        
    }
    if(flag) cout << "YES" << endl;
    else cout << "NO" << endl;
    return 0;
}
